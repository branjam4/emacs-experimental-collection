name: CI
on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  guix-build:
    name: Test Guix installation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Guix cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/guix
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-

      - name: Install Guix
        uses: PromyLOPh/guix-install-action@v1

      - name: Ensure no locale warning
        run: test -z "$(guix --version 2>&1 >/dev/null)"

      - name: System VM (full VM)
        run: guix system docker-image --root=emacs-vm.tar.gz vm.scm

      - name: Pack (Docker)
        run: guix pack --relocatable --save-provenance --symlink=/opt/gnu/bin=bin --root=qemu-emacs.tar.gz -m $GITHUB_WORKSPACE/emacs29-manifest.scm

      - name: Upload pack (Relocatable Binary)
        uses: actions/upload-artifact@v2
        with:
          name: emacs VM
          path: emacs-vm.tar.gz

      - name: Upload pack (Docker)
        uses: actions/upload-artifact@v2
        with:
          name: qemu Docker relocatable Binary
          path: 'qemu-emacs.tar.gz'

  container-deploy:
    name: Build and push to ghcr
    runs-on: ubuntu-latest
    needs: guix-build
    permissions:
      contents: read
      packages: write

      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download pack (Relocatable Binary)
        uses: actions/download-artifact@v3.0.0
        with:
          name: emacs VM
          path: temp/
      - name: Download pack (Docker)
        uses: actions/download-artifact@v3.0.0
        with:
          name: qemu Docker relocatable Binary
          path: temp/

      - name: Create Docker image
        id: image
        run: >-
          echo "::set-output name=IMAGE_ID::'$(docker load < ./temp/emacs-vm.tar.gz)'"

      - name: Tag Docker image
        run: docker tag ${{ steps.image.outputs.IMAGE_ID }} branjambuild:latest

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
        with:
          cosign-release: 'v1.7.1'

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"

        run: cosign sign ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}
